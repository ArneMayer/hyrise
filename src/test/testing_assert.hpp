#pragma once

#include <cmath>
#include <memory>

#include "gtest/gtest.h"

#include "optimizer/abstract_syntax_tree/abstract_ast_node.hpp"
#include "types.hpp"

namespace opossum {

class AbstractASTNode;
class Table;

/**
 * Indicates whether the comparison of two tables should happen order sensitive (Yes) or whether it should just be
 * checked whether both tables contain the same rows, independant of order.
 */
enum class OrderSensitivity {
  Yes, No
};

/**
 * "Strct" enforces that both tables have precisely the same column types, "Lenient" allows float instead of double, double
 * instead of float, long instead of int, int instead of long
 */
enum class TypeCmpMode {
  Strict, Lenient
};

/**
 * When comparing tables generated by Hyrise to those generated by, e.g. SQLite, minor differences are to be expected
 * (since sqlite uses double for arithmetics, Hyrise might use float) so for large numbers
 * FloatComparisonMode::RelativeDifference is better since it allows derivation independent of the absolute value.
 * When checking against manually generated tables, FloatComparisonMode::AbsoluteDifference is the better choice.
 */
enum class FloatComparisonMode {
  RelativeDifference,
  AbsoluteDifference
};

bool check_table_equal(const std::shared_ptr<const Table>& opossum_table,
                       const std::shared_ptr<const Table>& expected_table,
                                             OrderSensitivity order_sensitivity,
                                             TypeCmpMode type_cmp_mode,
                                             FloatComparisonMode float_comparison_mode);

void ASSERT_INNER_JOIN_NODE(const std::shared_ptr<AbstractASTNode>& node, ScanType scanType, ColumnID left_column_id,
                            ColumnID right_column_id);

void ASSERT_CROSS_JOIN_NODE(const std::shared_ptr<AbstractASTNode>& node);

bool check_ast_tie(const std::shared_ptr<const AbstractASTNode>& parent, ASTChildSide child_side,
                   const std::shared_ptr<const AbstractASTNode>& child);
}  // namespace opossum

#define EXPECT_TABLE_EQ(opossum_table, expected_table, order_sensitivity, type_cmp_mode, float_comparison_mode) \
  EXPECT_TRUE(check_table_equal(opossum_table, expected_table, order_sensitivity, type_cmp_mode, float_comparison_mode));

#define DEFAULT_EXPECT_TABLE_EQ(opossum_table, expected_table) \
  EXPECT_TABLE_EQ(opossum_table, expected_table, OrderSensitivity::No, TypeCmpMode::Strict, FloatComparisonMode::AbsoluteDifference)

#define EXPECT_ORDER_DEPENDENT_TABLE_EQ(opossum_table, expected_table) \
  EXPECT_TABLE_EQ(opossum_table, expected_table, OrderSensitivity::Yes, TypeCmpMode::Strict, FloatComparisonMode::AbsoluteDifference)

#define ASSERT_AST_TIE(parent, child_side, child) \
  if (!opossum::check_ast_tie(parent, child_side, child)) FAIL();

#define EXPECT_REL_NEAR(test_value, reference_value, rel_error) EXPECT_NEAR(reference_value, test_value, std::fabs(reference_value * rel_error))